"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.validateInitData = validateInitData;
exports.isAuthDateValid = isAuthDateValid;
exports.parseUser = parseUser;
// src/utils/telegram.ts
const crypto_1 = require("crypto");
/**
 * –í–∞–ª–∏–¥–∏—Ä—É–µ—Ç initData, –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ –æ—Ç Telegram Mini App.
 */
function validateInitData(initData, botToken) {
    try {
        const urlParams = new URLSearchParams(initData);
        const hash = urlParams.get("hash");
        console.log("üîç Debugging initData validation:");
        console.log("Original initData:", initData);
        console.log("Extracted hash:", hash);
        if (!hash) {
            console.log("‚ùå No hash found in initData");
            return false;
        }
        // –£–¥–∞–ª—è–µ–º hash –∏–∑ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        urlParams.delete("hash");
        // –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–ª—é—á–∏ –≤ –∞–ª—Ñ–∞–≤–∏—Ç–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
        const keys = Array.from(urlParams.keys()).sort();
        console.log("Sorted keys:", keys);
        // –§–æ—Ä–º–∏—Ä—É–µ–º —Å—Ç—Ä–æ–∫—É data-check-string
        const dataCheckString = keys
            .map((key) => `${key}=${urlParams.get(key)}`)
            .join("\n");
        console.log("Data check string:", dataCheckString);
        // –°–æ–∑–¥–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á –∏–∑ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
        const secretKey = (0, crypto_1.createHmac)("sha256", "WebAppData")
            .update(botToken)
            .digest();
        // –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö—ç—à –∏–∑ data-check-string
        const calculatedHash = (0, crypto_1.createHmac)("sha256", secretKey)
            .update(dataCheckString)
            .digest("hex");
        console.log("Expected hash:", hash);
        console.log("Calculated hash:", calculatedHash);
        console.log("Hashes match:", calculatedHash === hash);
        return calculatedHash === hash;
    }
    catch (error) {
        console.error("Error during initData validation:", error);
        return false;
    }
}
/**
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∞–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å auth_date (–Ω–µ —Å—Ç–∞—Ä—à–µ 24 —á–∞—Å–æ–≤)
 */
function isAuthDateValid(initData) {
    try {
        const urlParams = new URLSearchParams(initData);
        const authDate = urlParams.get("auth_date");
        if (!authDate) {
            return false;
        }
        const authTimestamp = parseInt(authDate, 10);
        const currentTimestamp = Math.floor(Date.now() / 1000);
        const maxAge = 24 * 60 * 60; // 24 —á–∞—Å–∞ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        return (currentTimestamp - authTimestamp) <= maxAge;
    }
    catch (error) {
        console.error("Error checking auth_date:", error);
        return false;
    }
}
/**
 * –ü–∞—Ä—Å–∏—Ç –æ–±—ä–µ–∫—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å—Ç—Ä–æ–∫–∏ initData.
 */
function parseUser(initData) {
    try {
        const urlParams = new URLSearchParams(initData);
        const userString = urlParams.get("user");
        if (userString) {
            return JSON.parse(decodeURIComponent(userString));
        }
        return null;
    }
    catch (error) {
        console.error("Error parsing user from initData:", error);
        return null;
    }
}
